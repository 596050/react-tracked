(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{47:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"rightToc",(function(){return s})),n.d(t,"default",(function(){return l}));n(0);var r=n(57);function a(){return(a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},c=Object.keys(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var o={id:"quick-start",title:"Quick Start",sidebar_label:"Quick Start"},s=[{value:"Create a new app",id:"create-a-new-app",children:[]},{value:"Create a global state with pure React",id:"create-a-global-state-with-pure-react",children:[]},{value:"Performance issue with pure React",id:"performance-issue-with-pure-react",children:[]},{value:"Install React Tracked",id:"install-react-tracked",children:[]},{value:"Use React Tracked instead of bare context",id:"use-react-tracked-instead-of-bare-context",children:[]}],i={rightToc:s},p="wrapper";function l(e){var t=e.components,n=c(e,["components"]);return Object(r.b)(p,a({},i,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,"Let's try a minimal example from scratch."),Object(r.b)("h2",{id:"create-a-new-app"},"Create a new app"),Object(r.b)("p",null,"Use ",Object(r.b)("a",a({parentName:"p"},{href:"https://create-react-app.dev"}),"create-react-app")," to create a new app."),Object(r.b)("pre",null,Object(r.b)("code",a({parentName:"pre"},{className:"language-bash"}),"npx create-react-app my-app # Add --typescript for TypeScript\n")),Object(r.b)("p",null,"Run the app."),Object(r.b)("pre",null,Object(r.b)("code",a({parentName:"pre"},{className:"language-bash"}),"cd my-app\nnpm start # Or yarn start\n")),Object(r.b)("h2",{id:"create-a-global-state-with-pure-react"},"Create a global state with pure React"),Object(r.b)("p",null,"Now, we create a global state that contains a number and a string."),Object(r.b)("p",null,"Create a new file ",Object(r.b)("inlineCode",{parentName:"p"},"./src/store.js"),". (",Object(r.b)("inlineCode",{parentName:"p"},"./src/store.tsx")," for TypeScript)"),Object(r.b)("pre",null,Object(r.b)("code",a({parentName:"pre"},{className:"language-typescript",metastring:"ts2js",ts2js:!0}),"import React, { createContext, useState, useContext } from 'react';\n\nconst initialState = {\n  count: 0,\n  text: 'hello',\n};\n\nconst useMyState = () => useState(initialState);\n\nconst MyContext = createContext<ReturnType<typeof useMyState> | null>(null);\n\nexport const useSharedState = () => {\n  const value = useContext(MyContext);\n  if (value === null) throw new Error('Please add SharedStateProvider');\n  return value;\n};\n\nexport const SharedStateProvider: React.FC = ({ children }) => (\n  <MyContext.Provider value={useMyState()}>\n    {children}\n  </MyContext.Provider>\n);\n")),Object(r.b)("p",null,"Create a new file ",Object(r.b)("inlineCode",{parentName:"p"},"./src/Counter.js"),". (",Object(r.b)("inlineCode",{parentName:"p"},"./src/Counter.tsx")," for TypeScript)"),Object(r.b)("pre",null,Object(r.b)("code",a({parentName:"pre"},{className:"language-typescript",metastring:"ts2js",ts2js:!0}),"import React from 'react';\n\nimport { useSharedState } from './store';\n\nconst Counter: React.FC = () => {\n  const [state, setState] = useSharedState();\n  const increment = () => {\n    setState(prev => ({ ...prev, count: prev.count + 1 }));\n  };\n  return (\n    <div>\n      {state.count}\n      <button onClick={increment}>+1</button>\n    </div>\n  );\n};\n\nexport default Counter;\n")),Object(r.b)("p",null,"Create a new file ",Object(r.b)("inlineCode",{parentName:"p"},"./src/TextBox.js"),". (",Object(r.b)("inlineCode",{parentName:"p"},"./src/TextBox.tsx")," for TypeScript)"),Object(r.b)("pre",null,Object(r.b)("code",a({parentName:"pre"},{className:"language-typescript",metastring:"ts2js",ts2js:!0}),"import React from 'react';\n\nimport { useSharedState } from './store';\n\nconst TextBox: React.FC = () => {\n  const [state, setState] = useSharedState();\n  const setText = (text: string) => {\n    setState(prev => ({ ...prev, text }));\n  };\n  return (\n    <div>\n      {state.text}\n      <input value={state.text} onChange={e => setText(e.target.value)} />\n    </div>\n  );\n};\n\nexport default TextBox;\n")),Object(r.b)("p",null,"Finally, modify the file ",Object(r.b)("inlineCode",{parentName:"p"},"./src/App.js"),". (",Object(r.b)("inlineCode",{parentName:"p"},"./src/App.tsx")," for TypeScript)"),Object(r.b)("pre",null,Object(r.b)("code",a({parentName:"pre"},{className:"language-typescript",metastring:"ts2js",ts2js:!0}),"import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport { SharedStateProvider } from './store';\nimport Counter from './Counter';\nimport TextBox from './TextBox';\n\nconst App: React.FC = () => (\n  <SharedStateProvider>\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Counter />\n        <TextBox />\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n      </header>\n    </div>\n  </SharedStateProvider>\n);\n\nexport default App;\n")),Object(r.b)("p",null,"Check the running app again and see how the counter and the text box work."),Object(r.b)("h2",{id:"performance-issue-with-pure-react"},"Performance issue with pure React"),Object(r.b)("p",null,"Our app works totally fine.\nBut if a shared state becomes very big,\nwe may experience a drop in performance.\nThis is because all components that use the shared state\nwill re-render even if only a small part of the shared state is changed."),Object(r.b)("p",null,"React Tracked solves this issue without efforts."),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"Note: In pure React, it's recommended to split context into pieces. Check out ",Object(r.b)("a",a({parentName:"p"},{href:"https://blog.axlight.com/posts/4-options-to-prevent-extra-rerenders-with-react-context/"}),"this")," or ",Object(r.b)("a",a({parentName:"p"},{href:"https://www.basefactor.com/global-state-with-react"}),"that")," for more information.")),Object(r.b)("h2",{id:"install-react-tracked"},"Install React Tracked"),Object(r.b)("p",null,"It's time to try React Tracked.\nLet's install the library."),Object(r.b)("pre",null,Object(r.b)("code",a({parentName:"pre"},{className:"language-bash"}),"npm install react-tracked # Or yarn add react-tracked\n")),Object(r.b)("h2",{id:"use-react-tracked-instead-of-bare-context"},"Use React Tracked instead of bare context"),Object(r.b)("p",null,"It's very simple.\nModify the file ",Object(r.b)("inlineCode",{parentName:"p"},"./src/store.js"),". (",Object(r.b)("inlineCode",{parentName:"p"},"./src/store.tsx")," for TypeScript)"),Object(r.b)("pre",null,Object(r.b)("code",a({parentName:"pre"},{className:"language-typescript",metastring:"ts2js",ts2js:!0}),"import { useState } from 'react';\nimport { createContainer } from 'react-tracked';\n\nconst initialState = {\n  count: 0,\n  text: 'hello',\n};\n\nconst useMyState = () => useState(initialState);\n\nexport const {\n  Provider: SharedStateProvider,\n  useTracked: useSharedState,\n} = createContainer(useMyState);\n")),Object(r.b)("p",null,"That's it. Check the running app and see it works as before."),Object(r.b)("p",null,"How can we see the difference?\nYou could add ",Object(r.b)("inlineCode",{parentName:"p"},"console.log")," in render (which is technically a side effect),\nor add ",Object(r.b)("inlineCode",{parentName:"p"},"{Math.random()}")," in JSX which is easier."),Object(r.b)("p",null,"For example, modify the Counter component like this."),Object(r.b)("pre",null,Object(r.b)("code",a({parentName:"pre"},{className:"language-typescript",metastring:"ts2js",ts2js:!0}),"const Counter: React.FC = () => {\n  const [state, setState] = useSharedState();\n  const increment = () => {\n    setState(prev => ({ ...prev, count: prev.count + 1 }));\n  };\n  return (\n    <div>\n      {state.count}\n      <button onClick={increment}>+1</button>\n      {Math.random()}\n    </div>\n  );\n};\n")),Object(r.b)("p",null,"With this, try both pure React version and React Tracked version."),Object(r.b)("p",null,"In the React Tracked version,\nthe random number only changes when clicking the increment button.\nIt won't change when typing in the text box."))}l.isMDXComponent=!0},57:function(e,t,n){"use strict";n.d(t,"a",(function(){return s})),n.d(t,"b",(function(){return u}));var r=n(0),a=n.n(r),c=a.a.createContext({}),o=function(e){var t=a.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):Object.assign({},t,e)),n},s=function(e){var t=o(e.components);return a.a.createElement(c.Provider,{value:t},e.children)};var i="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},l=Object(r.forwardRef)((function(e,t){var n=e.components,r=e.mdxType,c=e.originalType,s=e.parentName,i=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&-1===t.indexOf(r)&&(n[r]=e[r]);return n}(e,["components","mdxType","originalType","parentName"]),l=o(n),u=r,b=l[s+"."+u]||l[u]||p[u]||c;return n?a.a.createElement(b,Object.assign({},{ref:t},i,{components:n})):a.a.createElement(b,Object.assign({},{ref:t},i))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var c=n.length,o=new Array(c);o[0]=l;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s[i]="string"==typeof e?e:r,o[1]=s;for(var u=2;u<c;u++)o[u]=n[u];return a.a.createElement.apply(null,o)}return a.a.createElement.apply(null,n)}l.displayName="MDXCreateElement"}}]);