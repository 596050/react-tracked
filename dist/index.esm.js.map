{"version":3,"file":"index.esm.js","sources":["../src/utils.ts","../src/createProvider.ts","../src/useUpdate.ts","../src/useTrackedState.ts","../src/useSelector.ts","../src/createContainer.ts"],"sourcesContent":["import {\n  useEffect,\n  useLayoutEffect,\n  useRef,\n  useDebugValue,\n} from 'react';\n\nconst isClient = (\n  typeof window !== 'undefined'\n  && !/ServerSideRendering/.test(window.navigator && window.navigator.userAgent)\n);\n\nexport const useIsomorphicLayoutEffect = isClient ? useLayoutEffect : useEffect;\n\nconst affectedToPathList = <State>(\n  state: State,\n  affected: WeakMap<object, Set<string>>,\n) => {\n  const list: string[][] = [];\n  const walk = (obj: unknown, path?: string[]) => {\n    const used = affected.get(obj as object);\n    if (used) {\n      used.forEach((key) => {\n        walk((obj as { [k: string]: object })[key], path ? [...path, key] : [key]);\n      });\n    } else if (path) {\n      list.push(path);\n    }\n  };\n  walk(state);\n  return list;\n};\n\nexport const useAffectedDebugValue = <State>(\n  state: State,\n  affected: WeakMap<object, Set<string>>,\n) => {\n  const pathList = useRef<string[][]>();\n  useEffect(() => {\n    pathList.current = affectedToPathList(state, affected);\n  });\n  useDebugValue(pathList);\n};\n","/* eslint-disable @typescript-eslint/ban-ts-ignore */\n\nimport {\n  Context,\n  FC,\n  MutableRefObject,\n  // @ts-ignore\n  createMutableSource,\n  createElement,\n  useCallback,\n  useMemo,\n  useRef,\n} from 'react';\nimport {\n  unstable_UserBlockingPriority as UserBlockingPriority,\n  unstable_NormalPriority as NormalPriority,\n  unstable_runWithPriority as runWithPriority,\n} from 'scheduler';\n\nimport { useIsomorphicLayoutEffect } from './utils';\n\nexport const MUTABLE_SOURCE_CONTEXT_PROPERTY = 's';\nexport const UPDATE_CONTEXT_PROPERTY = 'u';\n\nexport const STATEREF_SOURCE_PROPERTY = 'r';\nexport const LISTENERS_SOURCE_PROPERTY = 'l';\n\n// @ts-ignore\nexport type ContextValue<State, Update> = {\n  [MUTABLE_SOURCE_CONTEXT_PROPERTY]: any;\n  [UPDATE_CONTEXT_PROPERTY]: Update;\n};\n\nexport const createProvider = <State, Update extends (...args: any) => any, Props>(\n  CustomContext: Context<ContextValue<State, Update>>,\n  useValue: (props: Props) => readonly [State, Update],\n) => {\n  const Provider: FC<Props> = (props) => {\n    const listeners = useRef(new Set<() => void>());\n    const [state, update] = useValue(props);\n    const stateRef = useRef(state);\n    useIsomorphicLayoutEffect(() => {\n      stateRef.current = state;\n      runWithPriority(NormalPriority, () => {\n        listeners.current.forEach((listener) => listener());\n      });\n    });\n    const updateWithPriority = useCallback((...args: any) => (\n      runWithPriority(UserBlockingPriority, () => update(...args))\n    ), [update]) as Update;\n    const mutableSource = useMemo(() => createMutableSource({\n      [STATEREF_SOURCE_PROPERTY]: stateRef,\n      [LISTENERS_SOURCE_PROPERTY]: listeners,\n    }, () => stateRef.current), []);\n    const contextValue = useMemo(() => ({\n      [MUTABLE_SOURCE_CONTEXT_PROPERTY]: mutableSource,\n      [UPDATE_CONTEXT_PROPERTY]: updateWithPriority,\n    }), [mutableSource, updateWithPriority]);\n    return createElement(CustomContext.Provider, { value: contextValue }, props.children);\n  };\n  return Provider;\n};\n\nexport const subscribe = (\n  source: { [LISTENERS_SOURCE_PROPERTY]: MutableRefObject<Set<() => void>> },\n  callback: () => void,\n) => {\n  const listeners = source[LISTENERS_SOURCE_PROPERTY].current;\n  listeners.add(callback);\n  return () => listeners.delete(callback);\n};\n","import { Context, useContext } from 'react';\n\nimport { ContextValue, UPDATE_CONTEXT_PROPERTY } from './createProvider';\n\nexport const useUpdate = <State, Update>(\n  CustomContext: Context<ContextValue<State, Update>>,\n) => {\n  const { [UPDATE_CONTEXT_PROPERTY]: update } = useContext(CustomContext);\n  return update;\n};\n","/* eslint-disable @typescript-eslint/ban-ts-ignore */\n\nimport {\n  Context,\n  MutableRefObject,\n  useCallback,\n  useContext,\n  useMemo,\n  // @ts-ignore\n  useMutableSource,\n  useRef,\n} from 'react';\nimport {\n  createDeepProxy,\n  isDeepChanged,\n  MODE_ASSUME_UNCHANGED_IF_UNAFFECTED,\n  MODE_IGNORE_REF_EQUALITY,\n  MODE_ASSUME_UNCHANGED_IF_UNAFFECTED_IN_DEEP,\n} from 'proxy-compare';\n\nimport { useIsomorphicLayoutEffect, useAffectedDebugValue } from './utils';\nimport {\n  ContextValue,\n  MUTABLE_SOURCE_CONTEXT_PROPERTY,\n  STATEREF_SOURCE_PROPERTY,\n  subscribe,\n} from './createProvider';\nimport { useUpdate } from './useUpdate';\n\nconst MODE_ALWAYS_ASSUME_CHANGED_IF_UNAFFECTED = 0;\nconst MODE_ALWAYS_ASSUME_UNCHANGED_IF_UNAFFECTED = (\n  MODE_ASSUME_UNCHANGED_IF_UNAFFECTED | MODE_ASSUME_UNCHANGED_IF_UNAFFECTED_IN_DEEP\n);\nconst MODE_MUTABLE_ROOT_STATE = MODE_IGNORE_REF_EQUALITY; // only for root\nconst MODE_DEFAULT = MODE_ASSUME_UNCHANGED_IF_UNAFFECTED; // only for root\n\nconst STATE_PROPERTY = 's';\nconst AFFECTED_PROPERTY = 'a';\nconst CACHE_PROPERTY = 'c';\nconst DEEP_PROXY_MODE_PROPERTY = 'd';\n\ntype Opts = any; // TODO types\n\nexport const useTrackedState = <State, Update>(\n  CustomContext: Context<ContextValue<State, Update>>,\n  opts: Opts = {},\n) => {\n  const {\n    [MUTABLE_SOURCE_CONTEXT_PROPERTY]: mutableSource,\n  } = useContext(CustomContext);\n  const affected = new WeakMap();\n  const lastTracked = useRef<any>(); // TODO types\n  const getSnapshot = useCallback(\n    (source: {\n      [STATEREF_SOURCE_PROPERTY]: MutableRefObject<State>;\n    }) => {\n      const nextState = source[STATEREF_SOURCE_PROPERTY].current;\n      const lastTrackedCurrent = lastTracked.current;\n      if (!lastTrackedCurrent) return nextState;\n      if (lastTrackedCurrent[AFFECTED_PROPERTY] !== affected) return nextState;\n      if (lastTrackedCurrent[STATE_PROPERTY] === nextState) return nextState;\n      if (isDeepChanged(\n        lastTrackedCurrent[STATE_PROPERTY],\n        nextState,\n        lastTrackedCurrent[AFFECTED_PROPERTY],\n        lastTrackedCurrent[CACHE_PROPERTY],\n        lastTrackedCurrent[DEEP_PROXY_MODE_PROPERTY],\n      )) return nextState;\n      // not changed\n      return lastTrackedCurrent[STATE_PROPERTY];\n    },\n    [affected],\n  );\n  const state: State = useMutableSource(mutableSource, getSnapshot, subscribe);\n  useIsomorphicLayoutEffect(() => {\n    lastTracked.current = {\n      [STATE_PROPERTY]: state,\n      [AFFECTED_PROPERTY]: affected,\n      [CACHE_PROPERTY]: new WeakMap(),\n      /* eslint-disable no-nested-ternary, indent */\n      [DEEP_PROXY_MODE_PROPERTY]:\n      opts.unstable_forceUpdateForStateChange ? MODE_ALWAYS_ASSUME_CHANGED_IF_UNAFFECTED\n      : opts.unstable_ignoreIntermediateObjectUsage ? MODE_ALWAYS_ASSUME_UNCHANGED_IF_UNAFFECTED\n      : opts.unstable_ignoreStateEquality ? MODE_MUTABLE_ROOT_STATE\n      : /* default */ MODE_DEFAULT,\n      /* eslint-enable no-nested-ternary, indent */\n    };\n  });\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    useAffectedDebugValue(state, affected);\n  }\n  const proxyCache = useRef(new WeakMap()); // per-hook proxyCache\n  return createDeepProxy(state, affected, proxyCache.current);\n};\n\nexport const useTracked = <State, Update>(\n  CustomContext: Context<ContextValue<State, Update>>,\n  opts?: Opts,\n) => {\n  const state = useTrackedState(CustomContext, opts);\n  const update = useUpdate(CustomContext);\n  return useMemo(() => [state, update], [state, update]) as [State, Update];\n};\n","/* eslint-disable @typescript-eslint/ban-ts-ignore */\n\nimport {\n  Context,\n  MutableRefObject,\n  useCallback,\n  useContext,\n  // @ts-ignore\n  useMutableSource,\n} from 'react';\n\nimport {\n  ContextValue,\n  MUTABLE_SOURCE_CONTEXT_PROPERTY,\n  STATEREF_SOURCE_PROPERTY,\n  subscribe,\n} from './createProvider';\n\nexport const useSelector = <State, Update, Selected>(\n  CustomContext: Context<ContextValue<State, Update>>,\n  selector: (state: State) => Selected,\n) => {\n  const {\n    [MUTABLE_SOURCE_CONTEXT_PROPERTY]: mutableSource,\n  } = useContext(CustomContext);\n  const getSnapshot = useCallback(\n    (source: { [STATEREF_SOURCE_PROPERTY]: MutableRefObject<State> }) => (\n      selector(source[STATEREF_SOURCE_PROPERTY].current)\n    ),\n    [selector],\n  );\n  return useMutableSource(mutableSource, getSnapshot, subscribe);\n};\n","import {\n  createContext,\n} from 'react';\n\nimport { ContextValue, createProvider } from './createProvider';\nimport {\n  useTrackedState as useTrackedStateOrig,\n  useTracked as useTrackedOrig,\n} from './useTrackedState';\nimport { useUpdate as useUpdateOrig } from './useUpdate';\nimport { useSelector as useSelectorOrig } from './useSelector';\n\nexport const createContainer = <State, Update extends (...args: any) => any, Props>(\n  useValue: (props: Props) => readonly [State, Update],\n) => {\n  const context = createContext(new Proxy({}, {\n    get() { throw new Error('Please use <Provider>'); },\n  }) as ContextValue<State, Update>);\n  const Provider = createProvider(context, useValue);\n  const useTrackedState = (\n    opts?: Parameters<typeof useTrackedStateOrig>[1],\n  ) => useTrackedStateOrig(context, opts);\n  const useTracked = (\n    opts?: Parameters<typeof useTrackedOrig>[1],\n  ) => useTrackedOrig(context, opts);\n  const useUpdate = () => useUpdateOrig(context);\n  const useSelector = <Selected>(\n    selector: (state: State) => Selected,\n  ) => useSelectorOrig(context, selector);\n  return {\n    Provider,\n    useTrackedState,\n    useTracked,\n    useUpdate,\n    useSelector,\n  } as const;\n};\n"],"names":["useIsomorphicLayoutEffect","window","test","navigator","userAgent","useEffect","useLayoutEffect","createProvider","CustomContext","useValue","props","listeners","useRef","Set","state","update","stateRef","current","runWithPriority","NormalPriority","forEach","listener","updateWithPriority","useCallback","args","UserBlockingPriority","mutableSource","useMemo","createMutableSource","contextValue","createElement","Provider","value","children","subscribe","source","callback","add","useUpdate","useContext","MODE_ALWAYS_ASSUME_UNCHANGED_IF_UNAFFECTED","MODE_ASSUME_UNCHANGED_IF_UNAFFECTED","MODE_ASSUME_UNCHANGED_IF_UNAFFECTED_IN_DEEP","MODE_MUTABLE_ROOT_STATE","MODE_IGNORE_REF_EQUALITY","MODE_DEFAULT","useTrackedState","opts","affected","WeakMap","lastTracked","getSnapshot","nextState","lastTrackedCurrent","isDeepChanged","useMutableSource","unstable_forceUpdateForStateChange","unstable_ignoreIntermediateObjectUsage","unstable_ignoreStateEquality","process","env","NODE_ENV","pathList","list","walk","obj","path","used","get","key","push","affectedToPathList","useDebugValue","useAffectedDebugValue","proxyCache","createDeepProxy","useTracked","useSelector","selector","createContainer","context","createContext","Proxy","Error","useTrackedStateOrig","useTrackedOrig","useUpdateOrig","useSelectorOrig"],"mappings":"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"}