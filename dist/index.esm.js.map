{"version":3,"file":"index.esm.js","sources":["../src/utils.ts","../src/useUpdate.ts","../src/useTrackedState.ts","../src/useSelector.ts","../src/createContainer.ts"],"sourcesContent":["import {\n  useEffect,\n  useRef,\n  useDebugValue,\n} from 'react';\n\nconst affectedToPathList = <State>(\n  state: State,\n  affected: WeakMap<object, Set<string>>,\n) => {\n  const list: string[][] = [];\n  const walk = (obj: unknown, path?: string[]) => {\n    const used = affected.get(obj as object);\n    if (used) {\n      used.forEach((key) => {\n        walk((obj as { [k: string]: object })[key], path ? [...path, key] : [key]);\n      });\n    } else if (path) {\n      list.push(path);\n    }\n  };\n  walk(state);\n  return list;\n};\n\nexport const useAffectedDebugValue = <State>(\n  state: State,\n  affected: WeakMap<object, Set<string>>,\n) => {\n  const pathList = useRef<string[][]>();\n  useEffect(() => {\n    pathList.current = affectedToPathList(state, affected);\n  });\n  useDebugValue(pathList);\n};\n","import {\n  Context as ContextOrig,\n  useContext as useContextOrig,\n} from 'react';\n\nexport const useUpdate = <Update>(\n  UpdateContext: ContextOrig<Update>,\n) => {\n  const update = useContextOrig(UpdateContext);\n  return update;\n};\n","import {\n  Context as ContextOrig,\n  useMemo,\n} from 'react';\nimport {\n  Context,\n  useContext,\n} from 'use-context-selector';\nimport {\n  createDeepProxy,\n  isDeepChanged,\n  MODE_ASSUME_UNCHANGED_IF_UNAFFECTED,\n  MODE_IGNORE_REF_EQUALITY,\n  MODE_ASSUME_UNCHANGED_IF_UNAFFECTED_IN_DEEP,\n} from 'proxy-compare';\n\nimport { useAffectedDebugValue } from './utils';\nimport { useUpdate } from './useUpdate';\n\nconst MODE_ALWAYS_ASSUME_CHANGED_IF_UNAFFECTED = 0;\nconst MODE_ALWAYS_ASSUME_UNCHANGED_IF_UNAFFECTED = (\n  MODE_ASSUME_UNCHANGED_IF_UNAFFECTED | MODE_ASSUME_UNCHANGED_IF_UNAFFECTED_IN_DEEP\n);\nconst MODE_MUTABLE_ROOT_STATE = MODE_IGNORE_REF_EQUALITY; // only for root\nconst MODE_DEFAULT = MODE_ASSUME_UNCHANGED_IF_UNAFFECTED; // only for root\n\ntype Opts = any; // TODO types\n\nexport const useTrackedState = <State>(\n  StateContext: Context<State>,\n  opts: Opts = {},\n) => {\n  const affected = new WeakMap();\n  const deepChangedMode = (\n    /* eslint-disable no-nested-ternary, indent, no-multi-spaces */\n      opts.unstable_forceUpdateForStateChange     ? MODE_ALWAYS_ASSUME_CHANGED_IF_UNAFFECTED\n    : opts.unstable_ignoreIntermediateObjectUsage ? MODE_ALWAYS_ASSUME_UNCHANGED_IF_UNAFFECTED\n    : opts.unstable_ignoreStateEquality           ? MODE_MUTABLE_ROOT_STATE\n    : /* default */                                 MODE_DEFAULT\n    /* eslint-enable no-nested-ternary, indent, no-multi-spaces */\n  );\n  const selector = useMemo(() => {\n    let prevState: State | null = null;\n    const deepChangedCache = new WeakMap();\n    return (nextState: State) => {\n      if (prevState !== null && prevState !== nextState && !isDeepChanged(\n        prevState,\n        nextState,\n        affected,\n        deepChangedCache,\n        deepChangedMode,\n      )) {\n        // not changed\n        return prevState;\n      }\n      prevState = nextState;\n      return nextState;\n    };\n  }, [affected, deepChangedMode]);\n  const state = useContext(StateContext, selector);\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    useAffectedDebugValue(state, affected);\n  }\n  const proxyCache = useMemo(() => new WeakMap(), []); // per-hook proxyCache\n  return createDeepProxy(state, affected, proxyCache);\n};\n\nexport const useTracked = <State, Update>(\n  StateContext: Context<State>,\n  UpdateContext: ContextOrig<Update>,\n  opts?: Opts,\n) => {\n  const state = useTrackedState(StateContext, opts);\n  const update = useUpdate(UpdateContext);\n  return useMemo(() => [state, update], [state, update]) as [State, Update];\n};\n","import {\n  useDebugValue,\n} from 'react';\nimport {\n  Context,\n  useContext,\n} from 'use-context-selector';\n\nexport const useSelector = <State, Selected>(\n  StateContext: Context<State>,\n  selector: (state: State) => Selected,\n) => {\n  const selected = useContext(StateContext, selector);\n  useDebugValue(selected);\n  return selected;\n};\n","import {\n  FC,\n  createContext as createContextOrig,\n  createElement,\n  useMemo,\n} from 'react';\nimport {\n  createContext,\n  wrapCallbackWithPriority,\n} from 'use-context-selector';\n\nimport {\n  useTrackedState as useTrackedStateOrig,\n  useTracked as useTrackedOrig,\n} from './useTrackedState';\nimport { useUpdate as useUpdateOrig } from './useUpdate';\nimport { useSelector as useSelectorOrig } from './useSelector';\n\nconst warningObject = new Proxy({}, {\n  get() { throw new Error('Please use <Provider>'); },\n  apply() { throw new Error('Please use <Provider>'); },\n});\n\nexport const createContainer = <State, Update extends (...args: any) => any, Props>(\n  useValue: (props: Props) => readonly [State, Update],\n) => {\n  const StateContext = createContext(warningObject as State);\n  const UpdateContext = createContextOrig(warningObject as Update);\n  const Provider: FC<Props> = (props) => {\n    const [state, update] = useValue(props);\n    const updateValue = useMemo(() => wrapCallbackWithPriority(update), [update]);\n    return createElement(UpdateContext.Provider, { value: updateValue },\n      createElement(StateContext.Provider, { value: state }, props.children));\n  };\n  const useTrackedState = (\n    opts?: Parameters<typeof useTrackedStateOrig>[1],\n  ) => useTrackedStateOrig(StateContext, opts);\n  const useTracked = (\n    opts?: Parameters<typeof useTrackedOrig>[2],\n  ) => useTrackedOrig(StateContext, UpdateContext, opts);\n  const useUpdate = () => useUpdateOrig(UpdateContext);\n  const useSelector = <Selected>(\n    selector: (state: State) => Selected,\n  ) => useSelectorOrig(StateContext, selector);\n  return {\n    Provider,\n    useTrackedState,\n    useTracked,\n    useUpdate,\n    useSelector,\n  } as const;\n};\n"],"names":["useUpdate","UpdateContext","useContextOrig","MODE_ALWAYS_ASSUME_UNCHANGED_IF_UNAFFECTED","MODE_ASSUME_UNCHANGED_IF_UNAFFECTED","MODE_ASSUME_UNCHANGED_IF_UNAFFECTED_IN_DEEP","MODE_MUTABLE_ROOT_STATE","MODE_IGNORE_REF_EQUALITY","MODE_DEFAULT","useTrackedState","StateContext","opts","affected","WeakMap","deepChangedMode","unstable_forceUpdateForStateChange","unstable_ignoreIntermediateObjectUsage","unstable_ignoreStateEquality","selector","useMemo","prevState","deepChangedCache","nextState","isDeepChanged","state","useContext","process","env","NODE_ENV","pathList","useRef","useEffect","current","list","walk","obj","path","used","get","forEach","key","push","affectedToPathList","useDebugValue","useAffectedDebugValue","proxyCache","createDeepProxy","useTracked","update","useSelector","selected","warningObject","Proxy","Error","apply","createContainer","useValue","createContext","createContextOrig","Provider","props","updateValue","wrapCallbackWithPriority","createElement","value","children","useTrackedStateOrig","useTrackedOrig","useUpdateOrig","useSelectorOrig"],"mappings":"0gBAMA,ICDaA,EAAY,SACvBC,GAGA,OADeC,EAAeD,ICY1BE,EACJC,EAAsCC,EAElCC,EAA0BC,EAC1BC,EAAeJ,EAIRK,EAAkB,SAC7BC,EACAC,YAAAA,IAAAA,EAAa,IAEb,IAAMC,EAAW,IAAIC,QACfC,EAEFH,EAAKI,mCAhBsC,EAiB3CJ,EAAKK,uCAAyCb,EAC9CQ,EAAKM,6BAAyCX,EACAE,EAG5CU,EAAWC,EAAQ,WACvB,IAAIC,EAA0B,KACxBC,EAAmB,IAAIR,QAC7B,gBAAQS,GACN,OAAkB,OAAdF,GAAsBA,IAAcE,GAAcC,EACpDH,EACAE,EACAV,EACAS,EACAP,IAKFM,EAAYE,EACLA,GAHEF,IAKV,CAACR,EAAUE,IACRU,EAAQC,EAAWf,EAAcQ,GACV,eAAzBQ,QAAQC,IAAIC,UFnCmB,SACnCJ,EACAZ,GAEA,IAAMiB,EAAWC,IACjBC,EAAU,WACRF,EAASG,QAzBc,SACzBR,EACAZ,GAEA,IAAMqB,EAAmB,GAYzB,OAXa,SAAPC,EAAQC,EAAcC,GAC1B,IAAMC,EAAOzB,EAAS0B,IAAIH,GACtBE,EACFA,EAAKE,QAAQ,SAACC,GACZN,EAAMC,EAAgCK,GAAMJ,YAAWA,GAAMI,IAAO,CAACA,MAE9DJ,GACTH,EAAKQ,KAAKL,GAGdF,CAAKV,GACES,EAScS,CAAmBlB,EAAOZ,KAE/C+B,EAAcd,GE6BZe,CAAsBpB,EAAOZ,GAE/B,IAAMiC,EAAa1B,EAAQ,sBAAUN,SAAW,IAChD,OAAOiC,EAAgBtB,EAAOZ,EAAUiC,IAG7BE,EAAa,SACxBrC,EACAT,EACAU,GAEA,IAAMa,EAAQf,EAAgBC,EAAcC,GACtCqC,EAAShD,EAAUC,GACzB,OAAOkB,EAAQ,iBAAM,CAACK,EAAOwB,IAAS,CAACxB,EAAOwB,KCnEnCC,EAAc,SACzBvC,EACAQ,GAEA,IAAMgC,EAAWzB,EAAWf,EAAcQ,GAE1C,OADAyB,EAAcO,GACPA,GCIHC,EAAgB,IAAIC,MAAM,GAAI,CAClCd,eAAQ,UAAUe,MAAM,0BACxBC,iBAAU,UAAUD,MAAM,4BAGfE,EAAkB,SAC7BC,GAEA,IAAM9C,EAAe+C,EAAcN,GAC7BlD,EAAgByD,EAAkBP,GAiBxC,MAAO,CACLQ,SAjB0B,SAACC,SACHJ,EAASI,GAA1BpC,OAAOwB,OACRa,EAAc1C,EAAQ,kBAAM2C,EAAyBd,IAAS,CAACA,IACrE,OAAOe,EAAc9D,EAAc0D,SAAU,CAAEK,MAAOH,GACpDE,EAAcrD,EAAaiD,SAAU,CAAEK,MAAOxC,GAASoC,EAAMK,YAc/DxD,gBAZsB,SACtBE,UACGuD,EAAoBxD,EAAcC,IAWrCoC,WAViB,SACjBpC,UACGwD,EAAezD,EAAcT,EAAeU,IAS/CX,UARgB,kBAAMoE,EAAcnE,IASpCgD,YARkB,SAClB/B,UACGmD,EAAgB3D,EAAcQ"}