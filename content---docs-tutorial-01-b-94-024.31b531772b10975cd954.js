(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{47:function(t,e,n){"use strict";n.r(e),n.d(e,"frontMatter",(function(){return a})),n.d(e,"rightToc",(function(){return i})),n.d(e,"default",(function(){return p}));n(0);var o=n(60);function s(){return(s=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(t[o]=n[o])}return t}).apply(this,arguments)}function r(t,e){if(null==t)return{};var n,o,s=function(t,e){if(null==t)return{};var n,o,s={},r=Object.keys(t);for(o=0;o<r.length;o++)n=r[o],e.indexOf(n)>=0||(s[n]=t[n]);return s}(t,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);for(o=0;o<r.length;o++)n=r[o],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(s[n]=t[n])}return s}var a={id:"tutorial-01",title:"Tutorial - ToDo App with useReducer",sidebar_label:"ToDo App (useReducer)"},i=[{value:"src/App.js",id:"srcappjs",children:[]},{value:"src/store.js",id:"srcstorejs",children:[]},{value:"src/TodoList.js",id:"srctodolistjs",children:[]},{value:"src/TodoItem.js",id:"srctodoitemjs",children:[]},{value:"src/NewTodo.js",id:"srcnewtodojs",children:[]},{value:"src/utils.js",id:"srcutilsjs",children:[]},{value:"CodeSandbox",id:"codesandbox",children:[]}],c={rightToc:i},d="wrapper";function p(t){var e=t.components,n=r(t,["components"]);return Object(o.b)(d,s({},c,n,{components:e,mdxType:"MDXLayout"}),Object(o.b)("p",null,"This tutorial shows example code with useReducer."),Object(o.b)("h2",{id:"srcappjs"},"src/App.js"),Object(o.b)("pre",null,Object(o.b)("code",s({parentName:"pre"},{className:"language-typescript",metastring:"ts2js",ts2js:!0}),"import * as React from 'react';\n\nimport { Provider } from './store';\nimport TodoList from './TodoList';\n\nconst App: React.FC = () => (\n  <Provider>\n    <TodoList />\n  </Provider>\n);\n\nexport default App;\n")),Object(o.b)("p",null,"This is the root component.\nIt wraps TodoList with Provider."),Object(o.b)("h2",{id:"srcstorejs"},"src/store.js"),Object(o.b)("pre",null,Object(o.b)("code",s({parentName:"pre"},{className:"language-typescript",metastring:"ts2js",ts2js:!0}),"import { useReducer } from 'react';\nimport { createContainer } from 'react-tracked';\n\nexport type TodoType = {\n  id: number;\n  title: string;\n  note?: string;\n  completed?: boolean;\n};\n\ntype State = {\n  todos: TodoType[];\n};\n\ntype Action =\n  | { type: 'ADD_TODO'; title: string }\n  | { type: 'DELETE_TODO'; id: number }\n  | { type: 'CHANGE_TODO'; id: number; note: string }\n  | { type: 'TOGGLE_TODO'; id: number }\n  | { type: 'CLEAR_ALL_NOTES' };\n\nconst initialState: State = {\n  todos: [\n    { id: 1, title: 'Wash dishes' },\n    { id: 2, title: 'Study JS' },\n    { id: 3, title: 'Buy ticket' },\n  ],\n};\n\nlet nextId = 4;\n\nconst reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case 'ADD_TODO':\n      return {\n        ...state,\n        todos: [...state.todos, { id: nextId++, title: action.title }],\n      };\n    case 'DELETE_TODO':\n      return {\n        ...state,\n        todos: state.todos.filter(todo => todo.id !== action.id),\n      };\n    case 'CHANGE_TODO':\n      return {\n        ...state,\n        todos: state.todos.map(todo =>\n          todo.id === action.id ? { ...todo, note: action.note } : todo\n        ),\n      };\n    case 'TOGGLE_TODO':\n      return {\n        ...state,\n        todos: state.todos.map(todo =>\n          todo.id === action.id ? { ...todo, completed: !todo.completed } : todo\n        ),\n      };\n    case 'CLEAR_ALL_NOTES':\n      return {\n        ...state,\n        todos: state.todos.map(todo => {\n          const { note, ...rest } = todo;\n          return rest;\n        }),\n      };\n    default:\n      return state;\n  }\n};\n\nconst useValue = () => useReducer(reducer, initialState);\n\nexport const {\n  Provider,\n  useTrackedState,\n  useUpdate: useDispatch,\n} = createContainer(useValue);\n")),Object(o.b)("p",null,"The store is created by useReducer.\nuseUpdated is renamed to useDispatch for exporting."),Object(o.b)("h2",{id:"srctodolistjs"},"src/TodoList.js"),Object(o.b)("pre",null,Object(o.b)("code",s({parentName:"pre"},{className:"language-typescript",metastring:"ts2js",ts2js:!0}),"import * as React from 'react';\n\nimport { useDispatch, useTrackedState } from './store';\nimport TodoItem from './TodoItem';\nimport NewTodo from './NewTodo';\n\nconst TodoList: React.FC = () => {\n  const dispatch = useDispatch();\n  const state = useTrackedState();\n  const { todos } = state;\n  return (\n    <div>\n      <ul>\n        {todos.map(({ id, title, completed, note }) => (\n          <TodoItem\n            key={id}\n            id={id}\n            title={title}\n            completed={completed}\n            note={note}\n          />\n        ))}\n        <NewTodo />\n      </ul>\n      <button onClick={() => dispatch({ type: 'CLEAR_ALL_NOTES' })}>\n        Clear all notes\n      </button>\n    </div>\n  );\n};\n\nexport default TodoList;\n")),Object(o.b)("p",null,"This component is to show the list of ",Object(o.b)("inlineCode",{parentName:"p"},"TodoItem"),"s,\n",Object(o.b)("inlineCode",{parentName:"p"},"NewTodo")," to create a new item, and\nClear button to reset notes in all items."),Object(o.b)("h2",{id:"srctodoitemjs"},"src/TodoItem.js"),Object(o.b)("pre",null,Object(o.b)("code",s({parentName:"pre"},{className:"language-typescript",metastring:"ts2js",ts2js:!0}),"import * as React from 'react';\n\nimport { useDispatch, TodoType } from './store';\nimport { useFlasher } from './utils';\n\nconst TodoItem: React.FC<TodoType> = ({ id, title, completed, note }) => {\n  const dispatch = useDispatch();\n  const delTodo = () => {\n    dispatch({ type: 'DELETE_TODO', id });\n  };\n  return (\n    <li ref={useFlasher()}>\n      <input\n        type=\"checkbox\"\n        onChange={() => dispatch({ type: 'TOGGLE_TODO', id })}\n      />\n      <span\n        style={{\n          textDecoration: completed ? 'line-through' : 'none',\n        }}\n      >\n        {title}\n      </span>\n      <input\n        value={note || ''}\n        placeholder=\"Enter note...\"\n        onChange={e =>\n          dispatch({ type: 'CHANGE_TODO', id, note: e.target.value })\n        }\n      />\n      <button onClick={delTodo}>Delete</button>\n    </li>\n  );\n};\n\nexport default React.memo(TodoItem);\n")),Object(o.b)("p",null,"This is the TodoItem component.\nWe prefer primitive props for memoized components."),Object(o.b)("p",null,"If you want to use object props for memoized components,\nyou need to notify the objects by ",Object(o.b)("a",s({parentName:"p"},{href:"/docs/api#trackmemo"}),"trackMemo"),".\nSee ",Object(o.b)("a",s({parentName:"p"},{href:"https://github.com/dai-shi/react-tracked/tree/master/examples/09_reactmemo"}),"example/09")," for the usage."),Object(o.b)("h2",{id:"srcnewtodojs"},"src/NewTodo.js"),Object(o.b)("pre",null,Object(o.b)("code",s({parentName:"pre"},{className:"language-typescript",metastring:"ts2js",ts2js:!0}),"import * as React from 'react';\nimport { useState } from 'react';\n\nimport { useDispatch } from './store';\nimport { useFlasher } from './utils';\n\nconst NewTodo: React.FC = () => {\n  const dispatch = useDispatch();\n  const [text, setText] = useState('');\n  const addTodo = () => {\n    dispatch({ type: 'ADD_TODO', title: text });\n    setText('');\n  };\n  return (\n    <li ref={useFlasher()}>\n      <input\n        value={text}\n        placeholder=\"Enter title...\"\n        onChange={e => setText(e.target.value)}\n      />\n      <button onClick={addTodo}>Add</button>\n    </li>\n  );\n};\n\nexport default React.memo(NewTodo);\n")),Object(o.b)("p",null,"This is the NewTodo component to create a new item.\nIt uses a local state for the text field."),Object(o.b)("h2",{id:"srcutilsjs"},"src/utils.js"),Object(o.b)("pre",null,Object(o.b)("code",s({parentName:"pre"},{className:"language-typescript",metastring:"ts2js",ts2js:!0}),"import { useRef, useEffect } from 'react';\n\nexport const useFlasher = () => {\n  const ref = useRef<HTMLLIElement>(null);\n  useEffect(() => {\n    if (!ref.current) return;\n    ref.current.setAttribute(\n      'style',\n      'box-shadow: 0 0 2px 1px red; transition: box-shadow 100ms ease-out;'\n    );\n    setTimeout(() => {\n      if (!ref.current) return;\n      ref.current.setAttribute('style', '');\n    }, 300);\n  });\n  return ref;\n};\n")),Object(o.b)("p",null,"This is a util function to show which components render."),Object(o.b)("h2",{id:"codesandbox"},"CodeSandbox"),Object(o.b)("p",null,"You can try ",Object(o.b)("a",s({parentName:"p"},{href:"https://codesandbox.io/s/modest-lumiere-j266e"}),"working example"),"."))}p.isMDXComponent=!0}}]);